{"version":3,"sources":["icons/checkedIcon.svg","icons/removeIcon.svg","Components/Input.js","Components/Task.js","Components/ToDoList.js","Components/CompletedList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Input","state","value","handleChangeValue","e","setState","target","handleSubmit","preventDefault","props","addTask","onSubmit","this","className","type","onChange","placeholder","Component","Task","text","completed","onClick","compliteTask","id","src","checkedIcon","alt","removeIcon","removeTask","proTypes","PropTypes","string","isRequired","bool","func","ToDoList","tasks","filter","t","map","task","index","array","CompletedList","protoTypes","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e55b7c5e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/checkedIcon.3f307db3.svg\";","module.exports = __webpack_public_path__ + \"static/media/removeIcon.87da3865.svg\";","import React, {Component} from 'react';\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\n\r\nclass Input extends Component {\r\n\tstate = {\r\n\t\tvalue: \"\"\r\n\t}\r\n\r\n\thandleChangeValue = (e) => {\r\n\t\tthis.setState({ value: e.target.value});\r\n\t}\r\n\r\n\thandleSubmit = (e) => {\r\n\t\te.preventDefault();\r\n\t\tthis.props.addTask(this.state.value);\r\n\t\tthis.setState({ value: \"\"})\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn(\r\n\t\t\t<form onSubmit={this.handleSubmit} className=\"input\">\r\n\t\t\t\t<input\r\n\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\tvalue={this.state.value}\r\n\t\t\t\t\t\tonChange={this.handleChangeValue}\r\n\t\t\t\t\t\tplaceholder=\"add new task\"/>\r\n\t\t\t\t<button type=\"submit\" >\r\n\t\t\t\t\t<div className=\"plus\"></div>\r\n\t\t\t\t</button>\r\n\t\t\t</form>\r\n\r\n\t\t)\r\n\t}\r\n}\r\n\r\n\r\nInput.propTypes = {\r\n\taddTask: PropTypes.func.isRequired,\r\n\r\n}\r\n\r\nexport default Input;\r\n\r\n\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport checkedIcon from '../icons/checkedIcon.svg';\r\nimport removeIcon from '../icons/removeIcon.svg';\r\n\r\nconst Task = props =>\r\n\r\n    <li className=\"task\">\r\n\r\n        <span>{props.text}</span>\r\n\r\n        {!props.completed\r\n        \t? <img\r\n\t\t\t\t\t\t\tonClick={() => props.compliteTask(props.id)}\r\n\t\t\t\t\t\t\tsrc={checkedIcon}\r\n\t\t\t\t\t\t\talt=\"ok\"/>\r\n        \t: null}\r\n\r\n        <img\r\n\t\t\t\t\tsrc={removeIcon} alt=\"delete\"\r\n\t\t\t\t\tonClick={() => props.removeTask(props.id) }\r\n\t\t\t\t/>\r\n\t</li>\r\n\r\nTask.proTypes = {\r\n    text: PropTypes.string.isRequired,\r\n    completed: PropTypes.bool.isRequired,\r\n\t\tcompliteTask: PropTypes.func.isRequired,\r\n\t\tremoveTask: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Task;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Task from './Task';\r\n\r\n\r\nconst ToDoList = props =>\r\n\r\n\t<ul className=\"toDoList\">\r\n\t\t<h3>To Do</h3>\r\n\r\n\t\t{props.tasks.filter(t => !t.completed).map((task, index) =>\r\n\t\t\t<Task\r\n\t\t\t\ttext={task.text}\r\n\t\t\t\tcompleted={task.completed}\r\n\t\t\t\tid={task.id}\r\n\t\t\t\tcompliteTask={props.compliteTask}\r\n\t\t\t\tremoveTask={props.removeTask}\t/>\r\n\t\t)}\r\n\t</ul>;\r\n\r\n\r\nToDoList.proTypes = {\r\n\ttasks: PropTypes.array.isRequired,\r\n\tcompliteTask: PropTypes.func.isRequired,\r\n\tremoveTask: PropTypes.func.isRequired\r\n}\r\n\r\nexport default ToDoList;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Task from './Task';\r\n\r\nconst CompletedList = props =>\r\n\r\n\r\n<ul className=\"finishedList\">\r\n\t<h3>Completed</h3>\r\n\r\n\t{props.tasks.filter(t => t.completed).map((task, index) =>\r\n\t\t\t<Task\r\n\t\t\t\ttext={task.text}\r\n\t\t\t\tcompleted={task.completed}\r\n\t\t\t\tid={task.id}\r\n\t\t\t\tremoveTask={props.removeTask}\r\n\t\t\t/>\r\n\t\t)}\r\n</ul>\r\n\r\n\r\nCompletedList.protoTypes = {\r\n\ttasks: PropTypes.array.isRequired,\r\n\tremoveTask: PropTypes.func.isRequired\r\n}\r\n\r\nexport default CompletedList;\r\n","import React, {Component} from 'react';\n\nimport Input from './Components/Input';\nimport './App.css';\nimport ToDoList from './Components/ToDoList';\nimport CompletedList from './Components/CompletedList';\n\n\nclass App extends Component {\n\n  state = {\n    tasks: [\n      {\n        text: \"kup głosnik\",\n        id: 0,\n        completed: false\n      },\n      {\n        text: \"wyrzuć śmieci\",\n        id: 1,\n        completed: false\n      },\n      {\n        text: \"zrób obiad\",\n        id: 2,\n        completed: true\n      },\n    ]\n  }\n\n  compliteTask = (id) => {\n    this.setState({\n      tasks: this.state.tasks.map( task => {\n        if( id === task.id) {\n          return {\n            ...task,\n            completed: true\n          }\n        }\n        return task;\n      })\n    })\n  }\n\n  removeTask = (id) =>\n    this.setState({\n      tasks: this.state.tasks.filter( task => id !== task.id)\n  });\n\n  id = 4;\n\n  addTask = text => {\n    this.setState({\n      tasks: [\n        {\n          text,\n          id: this.id += 1,\n          completed: false\n        },\n        ...this.state.tasks\n      ]\n    })\n  }\n\n  render () {\n    return (\n      <div className=\"wrapper\">\n        <Input addTask={this.addTask} />\n        <ToDoList\n          tasks={this.state.tasks}\n          compliteTask={this.compliteTask}\n          removeTask={this.removeTask}\n        />\n        <CompletedList\n          tasks={this.state.tasks}\n          removeTask={this.removeTask}\n        />\n    </div>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}